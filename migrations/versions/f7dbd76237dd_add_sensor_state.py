"""Add Sensor State

Revision ID: f7dbd76237dd
Revises: 1c3b1303cd8a
Create Date: 2025-06-01 14:16:25.111324

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f7dbd76237dd"
down_revision: Union[str, None] = "1c3b1303cd8a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum("ENVIRONMENTAL", "STATE", name="sensortypemodel").create(op.get_bind())
    op.create_table(
        "sensorstate",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("state", sa.Boolean(), nullable=False),
        sa.Column("voltage", sa.Float(), nullable=True),
        sa.Column("timestamp", sa.DateTime(timezone=True), nullable=False),
        sa.Column("sensor_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["sensor_id"],
            ["sensor.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "sensor",
        sa.Column(
            "type", postgresql.ENUM("ENVIRONMENTAL", "STATE", name="sensortypemodel", create_type=False), nullable=True
        ),
    )
    op.execute("UPDATE sensor SET type = 'ENVIRONMENTAL' WHERE type IS NULL")
    op.alter_column("sensor", "type", nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("sensor", "type")
    op.drop_table("sensorstate")
    sa.Enum("ENVIRONMENTAL", "STATE", name="sensortypemodel").drop(op.get_bind())
    # ### end Alembic commands ###
